package halityurttas.com.tr.cloudminingprofitcalculator.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTRACTS".
*/
public class ContractsDao extends AbstractDao<Contracts, Long> {

    public static final String TABLENAME = "CONTRACTS";

    /**
     * Properties of entity Contracts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ghs = new Property(1, int.class, "ghs", false, "GHS");
        public final static Property StartDate = new Property(2, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property Expire = new Property(3, Integer.class, "expire", false, "EXPİRE");
    }


    public ContractsDao(DaoConfig config) {
        super(config);
    }
    
    public ContractsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTRACTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GHS\" INTEGER NOT NULL ," + // 1: ghs
                "\"START_DATE\" INTEGER NOT NULL ," + // 2: startDate
                "\"EXPİRE\" INTEGER);"); // 3: expire
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTRACTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contracts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGhs());
        stmt.bindLong(3, entity.getStartDate().getTime());
 
        Integer expire = entity.getExpire();
        if (expire != null) {
            stmt.bindLong(4, expire);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contracts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGhs());
        stmt.bindLong(3, entity.getStartDate().getTime());
 
        Integer expire = entity.getExpire();
        if (expire != null) {
            stmt.bindLong(4, expire);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Contracts readEntity(Cursor cursor, int offset) {
        Contracts entity = new Contracts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // ghs
            new java.util.Date(cursor.getLong(offset + 2)), // startDate
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // expire
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contracts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGhs(cursor.getInt(offset + 1));
        entity.setStartDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setExpire(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Contracts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Contracts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contracts entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
